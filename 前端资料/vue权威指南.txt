
vue.js　权威指南

vue.js基本语法
vue.js源码解析
如何开发一个完整的组件
如何集成第三方组件
如何构建和调试一个vue的项目

主流打包构建工具


scart与vue.js结合


第１章

遇见vue.js


mvc模型

model(模型)
controller(控制器)
view(视图)


用户通过controller来操作model以达到view的变化


mvp魔心


controller/Presenter 负责逻辑的处理
model 提供数据
view 负责显示

mvvm模型


mvvm只是把mvc的controller和mvp的presenter改成了viewmodel

view的变化会自耦东更新到viewmodel,viewmodel的变化
也会自动同步到view上显示


这种自动同步是因为viewmodel中的属性实现了observer,当属性
变更时都能出发对应的操作

vue.js的特性

１．确实轻量
2.数据绑定
３．指令
4.插件化

核心库不包含Router,AJAX，表单验证等功能


与AngularJS的区别


相同点：

1.都支持指令－－－－内置指令和自定义指令
2.都支持过滤器－－－－内置过滤器和自定义过滤器
3.都支持双向绑定
4.都不支持低端浏览器



与react的区别

１．中心思想相同：一切都是组件，组件实例之间可以嵌套
2.都提供合理的钩子函数，可以让开发者定制化地去处理需求
３．都不内置类似ajax,router等功能核心包，而是以其他方式(插件)加载
４．在组件开发中都支持minxins的特性


vue.js使用的是DOM模板

vue.js在模板中提供了指令，过滤器等，额可以方便快捷的的操作DOM

与knockout的区别


１．都用到了数据和DOM元素绑定
２．DOM元素都是基于模板的
３．都追求UI和数据关联，自动刷新
4.都支持依赖跟踪


与 Riot的比较
相同点：
１．api设计简单而专注，学习成本低
２．提供自定义的生命周期钩子，方便开发这灵活使用
３．与主流的工具集成度比较高，支持与各种预编译工具集成
4.组件化思想，而且将HTML,JS,CSS混在一个组件中
５．都只更新变化了的元素

安装vue.js

vue.js从脚手架，构建，插件化，组件化，到编辑器空间，浏览器
插件等，基本涵盖了从开发到测试等多个环节



第２章　数据绑定



数据绑定是将数据和视图相关联，当数据发生变化时，可以自动更新视图


2.1 语法

2.1.1 插值


文本插值是组基本的形式,{{}}

*只需要渲染一次数据，后续数据变化不再关心


双大括号标签会把里面的值全部当做字符串来处理，如果值是HTML片段
可以使用大括号来绑定

双大括号标签还可以放在HTML标签内


vue.js提供了一系列文本渲染方式，足够日常的模板渲染情况下

vue指令和自身特性内是不可以插值的，


２．１．２　表达式

表达式可由javascript表达式和过滤器构成。

过滤器可以没有，也可以有多个

表达式是各种数值，变量，运算符的综合体。简单的表达式可以是
常量或变量名称。表达式的值是其运算结果


类似linux中的管道，vue.js允许在表达式后面添加过滤符号

过滤器本质上是一个js函数，

vue.js允许过滤器串联，过滤器还支持传入参数


vue.js还提供了许多内置的过滤器

2.1.3 指令


指令是带v-前缀的特殊特性，其值限定为绑定表达式，也就是js表达式
和过滤器。指令的作用是当表达式的值发生变化时，将这个变化反映到DOM
上。

<div v-if="show">DDFE</div>


当show为true时，展示DDFE字样，否则不展示
在指令和表达式之间插入一个参数，用冒号分隔，如v-bind指令

２．２　分隔符


vue.js中数据绑定的语法被设计为可配置的。


第３章　指令


指令(Directive)是特殊的带有前缀v-的特性。指令的值限定为绑定
表达式，指令的职责就是当其表达式的值改变时把某些特殊的应为应用到DOMshang


３．１　内部指令

基础指令

v-html
v-on
v-bind
v-ref
v-pre
v-clock
v-if
v-show
v-else
v-model
v-repeat(1,0-)
v-for(1,0+)
v-text
v-el


3.1.1  v-if
 v-if指令可以完全根据表达式的值把DOM中生成或移除一个元素。

因为v-if是一个指令，需要将它添加到一个元素上。
如果向切换多个元素，则可以把<template>元素包装元素，
并在其上使用v-if，最终的渲染结果不会包含它。


3.1.2  v-show

v-show　指令是根据表达式的值来显示或隐藏html元素。当v-show赋值
为false时，元素将被隐藏。查看DOM时，会发现元素上多了一个
内联样式style="display:none"


3.1.3 v-else


3.1.4 v-model

v-model　指令用来在input,select,text,checkbox,radio等表单
控件元素上创建双向数据绑定。

根据控件类型v-model自动选取正确的方法更新元素。

v-model是语法糖，在用户输入时间中更新数据，以及特别处理一些极端梨子

v-model指令可以添加多个参数

１．number
2.lazy
3.debounce


3.1.5 v-for


v-for指令基于源数据重复渲染元素。
也可以使用$index来程序按相对应的数组索引


vue.js包装被观察数组的变异方法，它们能触发视图更新。

被包装的方法有

push()
pop()
shift()
unshift()
splice()
sort()
reverse()

v-text指令可以更新元素的textContext

v-html指令可以更新元素的innerHTML


３．１．８　v-bind

v-bind指令用于响应更新Html特性，将一个或多个attribute,或
一个组件prop动态绑定到表达式。

３．１．９v-on
v-on 指令用于绑定事件监听器。事件类型由参数指定；表达式可以是一个方法
的名字或一个内联语句；如果没有修饰符，也可以


v-ref

v-el

v-pre


v-cloak


3.2.1 基础


除了内置指令，vue.js也允许注册自定义指令。自定义指令提供一种机制
将数据的变化映射为DOM行为，

１．钩子函数
bind,update,unbind

2. 指令实例属性

所有的钩子函数都将被复制到实际的指令对象中，在钩子内this指向
这个指令对象。这个对象暴露了一些有用的属性：

el -指令绑定的元素
vm--拥有该指令的上下文viewmodel
expression--指令的表达式，不包括参数和过滤器
arg--指令的参数

name--指令的名字，不包含前缀
modifiers-----一个对象，包含指令的修饰符
descriptor---一个对象，包含指令的解析结果

３．对象字面量

4.字面修饰符

当指令使用了字面修饰符时，它的值将按普通字符串处理并传递给update方法

update方法将只调用一次，因为普通字符串不能相应数据变化

５．元素指令


3.2.2 高级选项

vue.js也允许注册自定义指令。自定义指令提供一种机制将数据的变化映射为DOM

1.params
2.deep
3.twoWay
4. acceptStatement
5. Terminal
6.priority


3.3 内部指令解析

第４章计算睡醒
通常我们会在模板中绑定表达式，模板是用来描述视图结构的，

计算属性就是当其依赖属性的值发生变化时，这个属性的值会自动更新，
与之相关的DOM部分也会同步自动更新


４．２　计算属性缓存


第５章　表单控件板顶


在web应用中，我们经常会使用表单向服务端提交一些数据，在
vue.js中，可以使用v-model指令同步用户输入的数据到vue实例
data属性中，

５．１　基本用法

text,checkbox,radio,select 

5.2 值绑定

通过v-model绑定的值都是字符串

1.checkbox
2.radio
3.select



５．３　v-model修饰指令

v-model用来在视图与model之间同步数据


5.3.1 lazy

5.3.2 debounce

5.3.3 number


第６章　

过滤器

内置过滤器


1.capitalize
2. uppercase
3.lowercase


6.1.2 json过滤器

第７章　class与style绑定

第８章　过渡

第９章　method

第１０章　vue实例方法

数据方案

$data

用来访问组件实例观察的数据对象，该对象引用组件实例化时选项中的data属性

$options

用来访问组件实例化时的初始化选项对象


第１１章　组件

第１２　章　　表单校验

第１３章　与服务端通信

加载json数据

restful 调用方式就是客户端通过HTTP动词来增删改查
实现对服务端数据操作的一种架构模式

vue-resource 提供全局调用vue.resource或在组件实例上调用
this.$resource。

resource(url,[params],[actions],[options])

跨域ajax

vue-async-data是一个异步加载数据状态指示的插件，它本身不支持
异步获取服务端数据的功能，仅仅指示数据目前是处于加载状态还是已经加载
完毕。通过不同的状态我们可以设置加载动态效果


第１４章　路由与视图

vue.js适合做大型大型单页面应用

第１５　章　vue-cli

脚手架


第１６章　测试开发与调试

第１７章　　Scrat+Vue.js的化学反应





