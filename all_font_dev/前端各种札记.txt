
javascript值


定义了两种类型的值:混合值和变量值

混合值被称为字面量(literal) 变量值被称为变量.



书写混合值最重要的规则是:写数值有无小数点均可

字符串是文本,由双引号或单引号保卫

在编程语言中,变量用于存储数据之

javascript使用var关键词来声明变量

=号用于变量赋值

js使用算数运算符(+,- * /)

js使用赋值运算符(=) 向变量赋值



表达式是值,变量和运算符的组合,计算结果是值

表达式也可以包含变量值


js关键词用于表示被执行的动作
var 关键词告知浏览器创建新的变量

js注释

并非所有js语句都被执行.
双斜杠//  /* */

js标识符

标识符是名称

在js中,标识符用于命名变量(以及关键词,函数和标签)
在js中,首字母必须是字母,下划线(-)或美元符号($)
连串的字符可以是字母,数字,下划线或美元符号


提示,数值不可以作为首字母.这样,js就可以轻松区分标识符和数值

大小敏感

js中不能使用连字符.它是减法符号

使用Unicode字符集 ,Unicode覆盖几乎所有的字符,标点和符号

使用单行注释最为常见,提示:注释块常用语声明


使用注释来阻止执行

使用注释来方式代码执行很适合代码测试

使用注释块来阻止多行代码的执行

js变量是存储数据值的容器

js变量是存储数据值的容器

js标识符
所有js变量必须以唯一的名称的标识

这些唯一的名称称为标识符

标识符可以使短名称(比如x和y)
或更具描述性的名称(age,sum,totalVolume)

构造变量名称(唯一标识符)的通用规则:

1.名称可包含字母,数字,下划线和美元符号
2.名称必须以字母开头
3.名称也可以$和_开头
4. 名称对大小写字母敏感
5. 保留字()


x = x + 5
= 是赋值符号
== 是等于运算符


变量可存放数值,文本值

文本值就是字符串

js可处理多种数据而理性,只关心数值和字符串值

字符串被包围在双引号或单引号中,数值不用引号

如果把数值放在引号中,会被视作文本字符串


声明(创建)javascript使用var关键词来声明变量
在js中创建变量被称为"声明" 变量

可以通过var关键词来声明js变量

var carName;


声明之后,变量是没有值的.(技术上,它的值是undefined)

carName = "porsche";

可以声明变量时向它赋值

在脚本的开头声明所有变量的是一个好习惯

一条语句,多个变量


可以在一条语句中声明许多变量

以var 作为语句的开头,并以逗号分隔变量

声明可以横跨多行


Value = undefined

在计算机程序汇总,被声明的变量经常是不带值的
值可以是需被计算的内容,或是之后被提供的数据,比如数据输入

不带有值的变量,它的值将是undefined

变量carName在这条语句执行只有的值是undefined

重复声明js变量
如果再次声明讴歌js变量,将不会丢它的值.


var x = 3+5+8;


字符串也可以使用加号,但是字符串被级联

var x = "Bill" + " " + "Gates";

如果要把给数值放入引号中,其余数值会被视作字符串并被级联

如果先是数值后是字符串,就先计算后级联

向变量赋值,并把它们向敬爱

赋值运算符(=) 把值赋给变量

加法  +
减法  -
乘法  *
除法  /
系数   %
递加  ==
递减 --


字符串运算符


+运算符也用于对字符串进行想家(concatenate,级联)



+= 赋值运算符也可用于相加(级联)字符串


注意,在用于字符串时,+运算符被称为级联运算符

字符串和数字的向敬爱
相加两个数字,将返回和,但对一个数字和一个字符串相加将返回一个字符串

等于 ==
等值等型  ===
不相等  !=
不等值或不等型  !==
大于  >
小于 <
大于或等于  >=
小于或等于  <=
三元运算符 ?


逻辑运算符

逻辑与  &&
逻辑或  ||
逻辑非  !

类型运算符

返回变量的类型  typeof
instanceof  返回true,如果对象是对象类型的实例


位运算符  处理32位数

用逗号运算符可以在一条语句中执行多个运算
逗号运算符常用变量声明中

关系运算符执行的是比较运算.每个关系运算符都返回一个布尔值


布尔运算有三种:NOT,AND,OR

一元运算符只有一个参数,即要操作的对象或值


delete 运算符删除对以前定义的对象属性或方法的引用


delete运算符不能删除开发者未定义的属性和方法

void运算符对任何值返回undefined.该运算符通常用于避免输出不应该输出的值

= 赋值运算符向变量赋值
+= 赋值运算符向变量添加值
-= 赋值运算符从变量减去一个值
*= 赋值运算符相乘变量

/= 赋值运算符对变量相除
%= 赋值运算符把余数赋值给变量
js变量能够保存多种数据类型:数值,字符串值,数组,对象


编程时,数据类型很重要.js拥有动态类型,这意味这相同变量可用作不同类型

字符串(或文本字符串)是一串字符,字符串被引号保卫.可使用单引号或双引号


可以在字符串内使用引号,只要这些引号与包围字符串的引号不匹配;;
也就是双引号里面套单引号,单引号里面套双引号


js只有一种数值类型,写数值时用不用小数点均可
超大或超小的数值可以用科学计数法来写

布尔值只有两个值:true或false
var x = true;
var y = false;
布尔值经常用在条件测试汇总
数组用方括号书写
数组的项目由逗号分隔

数组索引基于零,这意味着第一个项目[0],第二个项目是[1]
对象用花括号来书写,对象属性是name:value,都有逗号分隔


typeof 运算符返回变量或表达式的类型

typeof运算符对数组返回"object" ,因为在javascript中数组属于对象

在js中,没有值的变量,其值是undefined,typeof也返回undefined

任何变量均可通过设置值为undefined进行清空.其类型也将是undefined


person =undefined; //值是undefined,类型是undefined


空值与undefined不是一回事
空的字符串既有值也有类型


var car =""; 值是"",类型是"string"

Null

在js中,null是"nothing".它被看做不存在的事务
在js中,null的数据类型是对象
可以把null在js中是理解为一个bug,它本应是null
可以通过设置值为null来清空对象

var person = null; 值是null,但是类型仍然是对象
也可以通过设置值为underfined清空对象

var person = undefined; 值是undefined,类型是underfined

Undefined 与Null 的区别

值相等,但是类型不同

typeof undefined //undefined
typeof null // object
null ===  undefined //false
null == undefined // true

原始数据

原始数据值是一种没有额外属性和方法的单一简单数据值

typeof 运算符只能返回一下四种原始类型之一:
string,number,boolean,undefined

复杂数据

typeof 运算符可以返回一下两种类型之一:
function, object

typeof 运算符吧对象,数组或null返回object
typeof 运算符不会把函数返回object

除了函数,其他的数组,对象,null都返回object


typeof 运算符把数组返回为"object" ,因为在javascript中数组即对象

typeof 运算符有一个参数,即要检查的变量或值

所有编程语言,都具有进行类型转换的能力

转换成字符串

var sColor = "red";
alert(sColor.length);


toString() 方法可把数组转换为字符串,并返回结果

toString()方法可把一个逻辑值转换为字符串,并返回结果
toString()可以把Date对象转换为字符串,并返回结果

dateObject的字符串表示,使用本地时间表示
toString()可以把一个Number对象转换为一个字符串,并返回结果
toString()返回字符串

parselnt()提取数字

parseFloat()

强制类型转换

1.Boolean(value):把给定的值转换成Boolean类型
2.Number(value):把给定的值转换成数字(可以是整数或浮点数)
3.String(value):把给定的值转换成字符串

String()函数,强制把任何值转换成字符串

强制类型转啊混很有用,但要确保使用值的正确性

引用类型通常叫做类(class)

引用类型类型通常叫做类(class) ,晕倒引用值,所处理的就是对象

var o = new object();

js函数是被设计为执行特定任务的代码块
js函数会在某代码调用它是被执行

js函数通过function关键词进行定义,其后是函数名和()

函数名包含字母,数字,下划线和美元符号(规则与变量名相同)

圆括号可包括由逗号分隔的参数:
(参数1,参数2,)

由函数执行的代码被放置在花括号中:{}

function name(参数1,参数2,参数3){
    要执行的代码
}


函数参数(function parameters) 实在函数定义中所列的名称
函数参数,是当调用函数时由函数接收的真实的值


在函数中,参数是局部变量
函数调用

函数中的代码在其他代码调用该函数时执行:
1.当事件发生时(当用户点击按钮时)
2.当javascript代码调用时
3.自动的(自调用)

函数返回

当javascript到达return时,函数将停止执行

如果函数被某条语句调用,js将在调用语句之后"返回"执行代码
函数通常会计算出返回值.这个返回值会返回给调用者

函数,只要定义一次代码,就可以多次使用它
能够多次向同一函数传递不同的参数,以产生不同的效果


()运算符调用函数
用作变量值的函数,函数的使用方法与变量一致,在所有类型的
公式,赋值和计算中

使用变量来存储函数的值

局部变量
在js函数中声明的变量,会成为函数的局部变量.局部变量只能在函数内访问

由于局部变量只能被其函数识别,因此可以在不同函数中使用相同
名称的变量.局部变量在函数开始时创建,在函数完成时被删除.

函数是一组可以随时使用额语句.是核心,


如何调用函数?
函数可以通过其名字加上括号中的参数进行调用,如果有多个采纳数


函数如何返回值

函数sayHi()未返回值,不过不必专门声明它
即使函数确实有值,也不必明确地声明它.该函数值需要使用
return 运算符后跟要返回的值即可

arguments对象

在函数代码中,使用特殊对象argumentgs,开发者无需明确指出
参数名,救恩给你访问它

检测参数个数
还可以用arguments对象检测函数的参数个数,引用属性arguments.lengthJIke 

模拟函数重载
用arguments判断传递给函数的参数个数,即可模拟函数重载

ECMAScript的函数实际上是功能完整的对象


Function对象的length属性
函数属于引用类型,所以它们也有属性和方法

Function对象的方法

Function对象也有与所有对象共享的valueOf()和toString()fangfa 

闭包,指的是词法表示包括不被计算的变量的函数,函数可以
使用函数之外定义的变量


简单的闭包实例

使用全局变量是一个简单的闭包实例

真实生活中的对象,属性和方法

属性
car.name = porsche
car.model = 911
car.length = 4499mm
car.color = white

方法

car.start()
car.drive()
car.brake()
car.stop()



所有汽车都拥有同样的属性,但属性值因车因异
所有汽车都拥有相同的方法,但是方法会在不同时间被执行


js变量是数据值的容器
把单一值(prosche)赋给名为car的变量

var car ="porsche";

对象也是变量.但是对象包含很多值

可以吧多个值赋给名为car的变量


var car{type:"porsche",model:"911",color:"white"};

值以名称:值对的方式来书写(名称和值由冒号分隔)
js对象是被命名值的容器

对象属性

(js对象中的)名称:值对被称为属性

var person = {fir}

对象也可以有方法,方法是在对象上执行的动作,方法以函数定义被存储在属性中


方法是作为属性来存储的函数


this 关键词


在函数定义中,this引用该函数的"拥有者"
this指的是"拥有"fullName函数的person对象
this.firstName的函数是this对象的firtName属性

this关键词指的是它所属的对象
this拥有不同的值,具体取决于它的使用位置:
1.在方法中,this指的是所有者对象
2. 单独的情况下,this指的是全局对象
3. 在函数中,this指的是全局对象
4. 在函数中,严格模式下,this是undefined
5. 在事件中,this指的是接收事件的元素

call(),apply()这样的方法可以将this引用到任何对象

this就是在函数里使用对象名
za
单独的this

在单独使用时,拥有者是全局对象,用词this指的是全局对象

在浏览器窗口中,全局对象是[object Window];

在严格模式中,如果单独使用,那么this指的是全局对象[object Window]

函数中的this(默认)

在js函数中,函数的拥有者默认绑定this

因此,在函数中,this指的是全局对象[object Window]

函数中的this(严格模式)

js严格模式不允许默认绑定
在函数中使用时,在严格模式下,this是未定义的(undefined)

事件处理程序中的this

在HTML事件处理程序汇总,this指的是接收此事件的html元素

对象方法绑定
this是peroson对象(person对象是该函数的"拥有者")

this.firstName意味着this(person)对象的firstName属性

显式函数绑定

call(),apply()方法是预定义的js方法

它们都可以用于将另一个对象作为参数调用对象方法


当person2作为参数调用person1.fullName时,this将引用person2,及时

let,const

提供了块作用域(Block Scope)变量和常量

js只有两种类型的作用域:全局作用域和函数作用域

全局作用域

全局(在函数之外)声明的变量拥有全局作用域

全局变量可以在js程序中的任何位置访问

函数作用域

局部(函数内)声明的变量拥有函数作用域


局部变量只能在它们被声明的函数内访问


js块作用域

通过var关键词的变量没有作用域
在块{}内声明的变量可以从块之外进行访问

{
    var x = 10;

}

可以使用let关键词声明拥有块组用于的变量
在块{} 内声明的变量无法从块外访问


{
    let x=10;

}

重新声明变量

使用var 关键字重新声明变量会带来问题．
在块中重新声明变量也将重新声明块外的变量：

var x=10;
//此处ｘ为１０
{
    var x=6;
    //此处x 为6
}

//此处x为６

使用let关键字重新声明变量可以解决这个问题
在块中重新声明变量不会冲刺呢声明块外的变量

var x =10;
// 此处x为１０
{
        let x=6;
        //此处x为６
}
//此处x为１０

循环作用域

在循环中使用var;

在循环中使用let

第一个例子，在循环中使用的变量使用var重新声明了循环之外的变量
第二个例子，在循环中使用的变量使用let并没有重新声明循环外的变量

如果在循环中用let声明了变量i,那么只有在循环内，变量i才是可见的

函数作用域

在函数内声明变量时，使用var,let很相似
它们都有函数作用域．
全局作用域

如果在块外声明，那么var,let也很相似

它们都有全局作用域

var x=10; //全局作用域
let y=6; // 全局作用域


HTML中的全局变量

使用js的情况下，全局作用域是js环境
在html中，全局作用域是window对象
通过var关键词定义的全局变量属于window对象

ｖａｒ carName ="porsche";
// 此处的代码可使用window.carName


通过let关键词定义的全局变量不属于window对象

重新声明

允许在程序的任何位置使用var重新声明js变量

在相同的作用域，或在相同的块中，通过let重新声明一个var变量是不允许的


在不同的作用域或块中，通过let重新声明变量是允许的

let x =6;


通过var声明的变量会提升到顶端．

可以在声明变量之前就使用它

//在此处，可以使用carName

var carName

通过let定义的变量不会被提升到顶端
在声明let变量之前就使用它会导致ReferenceError
变量从块的开头一直处于"暂时死区"，直到声明为止

// 在此处，不可以还是哟个